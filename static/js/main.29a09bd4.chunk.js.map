{"version":3,"sources":["Pie.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Pie","props","colors","sliceViewModels","data","reduce","a","s","last","length","sliceCirc","ratio","radius","Math","PI","concat","circOffset","circSlice","label","name","toFixed","color","slices","map","m","i","key","r","cx","cy","fill","stroke","strokeWidth","strokeDasharray","diameter","width","viewBox","Legend","left","legend","lastHeight","y","ceil","split","x","LegendLabel","Fragment","lines","w","splice","init","join","l","className","dy","textAnchor","App","useState","date","setDate","covidDeathsData","setCovidDeathsData","useEffect","fetch","then","json","j","weightedDistributionForUS","find","d","state","indicator","Date","data_as_of","toLocaleDateString","toPieShape","Slides","Slide","href","cdcRow","Object","keys","filter","k","cdcToPresentation","non_hispanic_white","non_hispanic_black_african_american","non_hispanic_american_indian_alaska_native","non_hispanic_asian_pacific_islander","hispanic_latino_total","other","footer","children","c","React","cloneElement","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29a09bd4.chunk.js","sourcesContent":["import React from 'react';\n\nexport function Pie(props: PropTypes) {\n\n  const colors = [\"coral\", \"cornflowerblue\", \"darkgoldenrod\", \"crimson\", \"darkslateblue\", \"darkcyan \"];\n\n  const sliceViewModels = props.data\n    .reduce((a: Array<SliceViewModel>, s: Slice) => {\n      const last = a[a.length - 1];\n      const sliceCirc = s.ratio * props.radius * Math.PI;\n      return a.concat({\n        circOffset: last.circOffset + last.circSlice,\n        circSlice: sliceCirc,\n        label: `${s.name} (${(s.ratio * 100).toFixed(1)}%)`,\n        color: colors[a.length - 1]\n      });\n    }, [{ circOffset: 0, circSlice: 0, label: '', color: \"\" }]);\n\n  const slices = sliceViewModels.map((m: SliceViewModel, i) => {\n    return [\n    <circle \n      key={i} \n      r={props.radius / 2} \n      cx={props.radius} \n      cy={props.radius} \n      fill=\"transparent\" \n      stroke={m.color} \n      strokeWidth={props.radius} \n      strokeDasharray={`0 ${m.circOffset} ${m.circSlice} 500`} />,\n    ]\n  }\n  );\n\n  const diameter = props.radius * 2;\n\n  return (<svg width={diameter} viewBox={`-10 -10 ${diameter + 500} ${diameter + 50}`}>\n    <circle r={props.radius} cx={props.radius} cy={props.radius} fill=\"gray\" stroke=\"black\" strokeWidth={10} />\n    {slices}\n    <Legend left={diameter}  sliceViewModels={sliceViewModels} />\n  </svg>);\n\n\n}\n\ninterface SliceViewModel {\n    circOffset: number;\n    circSlice: number;\n    label: string;\n    color: string;\n}\n\ninterface Slice {\n  name: string;\n  ratio: number;\n}\n\ninterface PropTypes {\n    radius: number;\n    data: Array<Slice>;\n}\n\nfunction Legend(props: {left: number, sliceViewModels: SliceViewModel[]}) {\n  function toLegendLabel(a: any[], m: SliceViewModel): any[] {\n    const last = a[a.length - 1];\n    const lastHeight = !last ? 0 : last.y + (44 * Math.ceil(last.label.split(\" \").length / 3));\n\n    return a.concat({ ...m, x: props.left, y: lastHeight });\n  }\n  \n  const legend = props.sliceViewModels\n    .reduce(toLegendLabel, [])\n    .map((m: any, i) => <LegendLabel key={i} x={m.x} y={m.y} color={m.color} label={m.label} />);\n  \n    return <React.Fragment>\n      {legend}\n    </React.Fragment>;\n}\n\n\nfunction LegendLabel(props: {x: number, y: number, color: string, label: string}): JSX.Element {\n  const isMultipleOf3 = (x: number) => {\n    return x !== 0 && x % 3 === 0\n  }\n  \n  let lines = props.label\n    .split(\" \")\n    .reduce((a: string[][], w: string) => {\n      if(isMultipleOf3(last(a).length)) {\n        return a.concat([[w]])\n      }\n\n      return init(a).concat([last(a).concat(w)])\n    }, [[]])\n    .map(lines => lines.join(\" \"))\n\n  return (\n    <React.Fragment>\n      {lines.map((l, i) => (\n        <text key={i} x={props.x + 50} y=\"30%\" className={\"Legend-label\"} dy={`${props.y + (40 * i)}`} fill={`${props.color}`} stroke={`${props.color}`} textAnchor=\"left\">{`${l}`}</text>\n      ))}\n    </React.Fragment>\n    )\n}\n\nfunction last<T>(a: T[]): T {\n  return a[a.length - 1]\n} \n\nfunction init<T>(a: T[]): T[] {\n  return a.splice(0, a.length - 1) \n} ","import React, { useState, useEffect, Children } from 'react';\nimport './App.css'\nimport { Pie } from './Pie';\n\n\nfunction App() {\n\n  const [date, setDate] = useState<string|null>(null)\n  const [covidDeathsData, setCovidDeathsData] = useState([])\n\n  useEffect(() => {\n    fetch(\"https://data.cdc.gov/resource/pj7m-y5uh.json\")\n    .then(r => r.json())\n    .then(j => {\n      const weightedDistributionForUS = j.find((d: any) => \n        d.state === \"United States\" && d.indicator === \"Weighted distribution of population (%)\")\n      setDate(new Date(weightedDistributionForUS.data_as_of).toLocaleDateString())\n      setCovidDeathsData(toPieShape(weightedDistributionForUS))\n    })\n  }, [])\n\n  return (\n    <Slides>\n      <Slide>\n        <h1>{`Total Covid Deaths by Demographic as of ${date}`}</h1>\n        <figure>\n          <Pie radius={300} data={covidDeathsData} />\n          <figcaption>\n            Source: <a href=\"https://data.cdc.gov/NCHS/Provisional-Death-Counts-for-Coronavirus-Disease-C/pj7m-y5uh\">CDC</a>\n          </figcaption>\n        </figure>\n      </Slide>\n      <Slide>\n        <h1>Somehow,</h1>\n        <p><em>Covid-19 disproportionately targets people of color</em> eventhough it doesn't have eyes.</p>\n      </Slide>\n      <Slide>\n        <h1>If our system can make the actions of a virus racist</h1>\n        <p><em>then what chances do we have in being color-blind?</em></p>\n      </Slide>\n    </Slides>\n  );\n}\n\nexport default App;\n\nconst toPieShape = (cdcRow: any) : any => Object.keys(cdcRow)\n  .filter(k => k !== \"state\" && k !== \"indicator\" && k !== \"data_as_of\")\n  .map((k) => ({name: cdcToPresentation[k], ratio: cdcRow[k]/100}))\n\n\nconst cdcToPresentation: any = {\n  non_hispanic_white: \"White\",\n  non_hispanic_black_african_american: \"Black / African American\",\n  non_hispanic_american_indian_alaska_native: \"American Indian / Alaska Native\",\n  non_hispanic_asian_pacific_islander: \"Asian\",\n  hispanic_latino_total: \"Latinx\",\n  other: \"Other\"\n}\n\nfunction Slide(props: {children: any, last?: boolean}) {\n  \n  const footer = !props.last \n  ? (<footer className=\"slide-footer\">\n      <p>Next</p>\n    </footer>)\n  : (<footer className=\"slide-footer-end\">\n    <div className=\"period\"></div>\n  </footer>)\n\n  return <section className=\"slide\">\n    <div className=\"slide-body\">\n      {props.children}\n    </div>\n    {footer}\n  </section>;\n}\n\n\nfunction Slides(props: {children: React.ReactElement[]}) {\n  // props.children.map((c) => React.cloneElement(c))\n  return (\n    <div className=\"container\">\n      {props.children.map((c, i) => {\n        return i + 1 === props.children.length ? React.cloneElement(c, {last: true}) : c\n        })\n      }\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}