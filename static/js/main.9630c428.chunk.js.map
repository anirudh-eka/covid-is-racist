{"version":3,"sources":["Pie.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Pie","props","colors","diameter","chartWidth","radius","sliceViewModels","data","reduce","a","s","last","length","sliceCirc","ratio","Math","PI","concat","circOffset","circSlice","label","name","toFixed","color","slices","map","m","i","key","r","cx","cy","fill","stroke","strokeWidth","strokeDasharray","Fragment","width","viewBox","Legend","legend","style","marginTop","className","App","useState","date","setDate","covidDeathsData","setCovidDeathsData","slidesWidth","setSlidesWidth","useEffect","fetch","then","json","j","weightedDistributionForUS","find","d","state","indicator","Date","data_as_of","toLocaleDateString","toPieShape","Slides","onWidthResize","Slide","href","cdcRow","Object","keys","filter","k","cdcToPresentation","non_hispanic_white","non_hispanic_black_african_american","non_hispanic_american_indian_alaska_native","non_hispanic_asian_pacific_islander","hispanic_latino_total","other","footer","children","target","useRef","current","getBoundingClientRect","ref","c","React","cloneElement","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9630c428.chunk.js","sourcesContent":["import React from 'react';\nimport './Pie.css'\n\nexport function Pie(props: PropTypes) {\n\n  const colors = [\"coral\", \"cornflowerblue\", \"darkgoldenrod\", \"crimson\", \"darkslateblue\", \"darkcyan \"];\n\n  const diameter = props.chartWidth * 0.6\n\n  const radius = diameter / 2\n\n  const sliceViewModels = props.data\n    .reduce((a: Array<SliceViewModel>, s: Slice) => {\n      const last = a[a.length - 1];\n      const sliceCirc = s.ratio * radius * Math.PI;\n      return a.concat({\n        circOffset: last.circOffset + last.circSlice,\n        circSlice: sliceCirc,\n        label: `${s.name} (${(s.ratio * 100).toFixed(1)}%)`,\n        color: colors[a.length - 1]\n      });\n    }, [{ circOffset: 0, circSlice: 0, label: '', color: \"\" }]);\n\n  const slices = sliceViewModels.map((m: SliceViewModel, i) => {\n    return [\n    <circle \n      key={i} \n      r={radius / 2} \n      cx={radius} \n      cy={radius} \n      fill=\"transparent\" \n      stroke={m.color} \n      strokeWidth={radius} \n      strokeDasharray={`0 ${m.circOffset} ${m.circSlice} 500`} />,\n    ]\n  }\n  );\n\n  return (\n  <React.Fragment>\n    <svg width={diameter} viewBox={`-10 -10 ${diameter + 20} ${diameter + 20}`}>\n      <circle r={radius} cx={radius} cy={radius} fill=\"gray\" stroke=\"black\" strokeWidth={10} />\n      {slices}\n    </svg>\n    <Legend width={props.chartWidth * 0.4} sliceViewModels={sliceViewModels} />\n  </React.Fragment>\n  );\n\n\n}\n\ninterface SliceViewModel {\n    circOffset: number;\n    circSlice: number;\n    label: string;\n    color: string;\n}\n\ninterface Slice {\n  name: string;\n  ratio: number;\n}\n\ninterface PropTypes {\n    chartWidth: number;\n    data: Array<Slice>;\n}\n\nfunction Legend(props: {sliceViewModels: SliceViewModel[], width: number}) {\n\n  const legend = props.sliceViewModels.map((m: SliceViewModel) => <li style={{color: m.color}}>{m.label}</li>)\n  \n    return <ul style={{width: props.width, marginTop: props.width * 0.3}} className=\"pie-legend\">\n      {legend}\n    </ul>;\n}","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css'\nimport { Pie } from './Pie';\n\n\nfunction App() {\n\n  const [date, setDate] = useState<string|null>(null)\n  const [covidDeathsData, setCovidDeathsData] = useState([])\n  const [slidesWidth, setSlidesWidth] = useState(0)\n\n  useEffect(() => {\n    fetch(\"https://data.cdc.gov/resource/pj7m-y5uh.json\")\n    .then(r => r.json())\n    .then(j => {\n      const weightedDistributionForUS = j.find((d: any) => \n        d.state === \"United States\" && d.indicator === \"Weighted distribution of population (%)\")\n      setDate(new Date(weightedDistributionForUS.data_as_of).toLocaleDateString())\n      setCovidDeathsData(toPieShape(weightedDistributionForUS))\n    })\n  }, [])\n\n  return (\n    <Slides onWidthResize={setSlidesWidth} >\n      <Slide>\n        <h1>{`Covid-19 Deaths by Demographic as of ${date}`}</h1>\n        <figure>\n          <Pie chartWidth={slidesWidth} data={covidDeathsData} />\n          <figcaption>\n            Source: <a href=\"https://data.cdc.gov/NCHS/Provisional-Death-Counts-for-Coronavirus-Disease-C/pj7m-y5uh\">CDC</a>\n          </figcaption>\n        </figure>\n      </Slide>\n      <Slide>\n        <p>\n          Non-Hispanic whites make up roughly <a href=\"https://data.census.gov/cedsci/table?q=United%20States&g=0100000US&hidePreview=true&tid=ACSDP1Y2018.DP05&table=DP05\">60 percent of the population.</a> So as you can see from the chart, <em>Covid-19 disproportionately targets people of color.</em> And it does it without eyes. This begs the question:\n        </p>\n      </Slide>\n      <Slide>\n        <h1>If our system can teach a virus to see race</h1>\n        <p><em>then it's no surprise that the police aren't color-blind.</em> Honestly, they never stood a chance.</p>\n      </Slide>\n    </Slides>\n  );\n}\n\nexport default App;\n\nconst toPieShape = (cdcRow: any) : any => Object.keys(cdcRow)\n  .filter(k => k !== \"state\" && k !== \"indicator\" && k !== \"data_as_of\")\n  .map((k) => ({name: cdcToPresentation[k], ratio: cdcRow[k]/100}))\n\n\nconst cdcToPresentation: any = {\n  non_hispanic_white: \"White\",\n  non_hispanic_black_african_american: \"Black / African American\",\n  non_hispanic_american_indian_alaska_native: \"American Indian / Alaska Native\",\n  non_hispanic_asian_pacific_islander: \"Asian\",\n  hispanic_latino_total: \"Latinx\",\n  other: \"Other\"\n}\n\nfunction Slide(props: {children: any, last?: boolean}) {\n  \n  const footer = !props.last \n  ? (<footer className=\"slide-footer\">\n      <p>â†“</p>\n    </footer>)\n  : (<footer className=\"slide-footer-end\">\n    <div className=\"period\"></div>\n  </footer>)\n\n  return <section className=\"slide\">\n    <div className=\"slide-body\">\n      {props.children}\n    </div>\n    {footer}\n  </section>;\n}\n\n\nfunction Slides(props: {children: React.ReactElement[], onWidthResize?: Function}) {\n  const target: any = useRef(null)\n\n  useEffect(() => {\n    if(target && target.current) {\n      const { width } = target.current.getBoundingClientRect()\n      props.onWidthResize && props.onWidthResize(width)\n    }\n  }, [])\n\n  return (\n    <div className=\"container\" ref={target} >\n      {props.children.map((c, i) => {\n        return i + 1 === props.children.length ? React.cloneElement(c, {last: true}) : c\n        })\n      }\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}